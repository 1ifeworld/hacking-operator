import type { Address } from "abitype";
import type { Client, Hash, Hex } from "viem";
import type { PartialBy } from "viem/types/utils";
import type { BundlerClient } from "../clients/bundler";
import type { UserOperation } from "../types";
import type { TStatus } from "../types/userOperation";
export type SendUserOperationParameters = {
    userOperation: UserOperation;
    entryPoint: Address;
};
export type EstimateUserOperationGasParameters = {
    userOperation: PartialBy<UserOperation, "callGasLimit" | "preVerificationGas" | "verificationGasLimit">;
    entryPoint: Address;
};
export type EstimateUserOperationGasReturnType = {
    preVerificationGas: bigint;
    verificationGasLimit: bigint;
    callGasLimit: bigint;
};
export type GetUserOperationByHashParameters = {
    hash: Hash;
};
export type GetUserOperationByHashReturnType = {
    userOperation: UserOperation;
    entryPoint: Address;
    transactionHash: Hash;
    blockHash: Hash;
    blockNumber: bigint;
} | null;
export type GetUserOperationReceiptParameters = {
    hash: Hash;
};
export type GetUserOperationReceiptReturnType = {
    userOpHash: Hash;
    sender: Address;
    nonce: bigint;
    actualGasUsed: bigint;
    actualGasCost: bigint;
    success: boolean;
    receipt: {
        transactionHash: Hex;
        transactionIndex: bigint;
        blockHash: Hash;
        blockNumber: bigint;
        from: Address;
        to: Address | null;
        cumulativeGasUsed: bigint;
        status: TStatus;
        gasUsed: bigint;
        contractAddress: Address | null;
        logsBloom: Hex;
        effectiveGasPrice: bigint;
    };
    logs: {
        data: Hex;
        blockNumber: bigint;
        blockHash: Hash;
        transactionHash: Hash;
        logIndex: bigint;
        transactionIndex: bigint;
        address: Address;
        topics: Hex[];
    }[];
} | null;
/**
 * Sends user operation to the bundler
 *
 * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/sendUserOperation
 *
 * @param client {@link BundlerClient} that you created using viem's createClient and extended it with bundlerActions.
 * @param args {@link SendUserOperationParameters}.
 * @returns UserOpHash that you can use to track user operation as {@link Hash}.
 *
 *
 * @example
 * import { createClient } from "viem"
 * import { sendUserOperation } from "permissionless/actions"
 *
 * const bundlerClient = createClient({
 *      chain: goerli,
 *      transport: http(BUNDLER_URL)
 * })
 *
 * const userOpHash = sendUserOperation(bundlerClient, {
 *      userOperation: signedUserOperation,
 *      entryPoint: entryPoint
 * })
 *
 * // Return '0xe9fad2cd67f9ca1d0b7a6513b2a42066784c8df938518da2b51bb8cc9a89ea34'
 *
 */
export declare const sendUserOperation: (client: BundlerClient, args: SendUserOperationParameters) => Promise<Hash>;
/**
 * Estimates preVerificationGas, verificationGasLimit and callGasLimit for user operation
 *
 * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/estimateUserOperationGas
 *
 * @param client {@link BundlerClient} that you created using viem's createClient and extended it with bundlerActions.
 * @param args {@link EstimateUserOperationGasParameters}
 * @returns preVerificationGas, verificationGasLimit and callGasLimit as {@link EstimateUserOperationGasReturnType}
 *
 *
 * @example
 * import { createClient } from "viem"
 * import { estimateUserOperationGas } from "permissionless/actions"
 *
 * const bundlerClient = createClient({
 *      chain: goerli,
 *      transport: http(BUNDLER_URL)
 * })
 *
 * const gasParameters = estimateUserOperationGas(bundlerClient, {
 *      serOperation: signedUserOperation,
 *      entryPoint: entryPoint
 * })
 *
 * // Return {preVerificationGas: 43492n, verificationGasLimit: 59436n, callGasLimit: 9000n}
 *
 */
export declare const estimateUserOperationGas: (client: BundlerClient, args: EstimateUserOperationGasParameters) => Promise<EstimateUserOperationGasReturnType>;
/**
 * Returns the supported entrypoints by the bundler service
 *
 * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/supportedEntryPoints
 *
 * @param client {@link BundlerClient} that you created using viem's createClient and extended it with bundlerActions.
 * @returns Supported entryPoints
 *
 *
 * @example
 * import { createClient } from "viem"
 * import { supportedEntryPoints } from "permissionless/actions"
 *
 * const bundlerClient = createClient({
 *      chain: goerli,
 *      transport: http(BUNDLER_URL)
 * })
 *
 * const entryPointsSupported = supportedEntryPoints(bundlerClient)
 * // Return ['0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789']
 *
 */
export declare const supportedEntryPoints: (client: BundlerClient) => Promise<Address[]>;
/**
 * Returns the supported chain id by the bundler service
 *
 * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/chainId
 *
 * @param client {@link BundlerClient} that you created using viem's createClient and extended it with bundlerActions.
 * @returns Supported chain id
 *
 *
 * @example
 * import { createClient } from "viem"
 * import { chainId } from "permissionless/actions"
 *
 * const bundlerClient = createClient({
 *      chain: goerli,
 *      transport: http(BUNDLER_URL)
 * })
 *
 * const bundlerChainId = chainId(bundlerClient)
 * // Return 5n for Goerli
 *
 */
export declare const chainId: (client: BundlerClient) => Promise<number>;
/**
 * Returns the user operation from userOpHash
 *
 * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/getUserOperationByHash
 *
 * @param client {@link BundlerClient} that you created using viem's createClient and extended it with bundlerActions.
 * @param args {@link GetUserOperationByHashParameters} UserOpHash that was returned by {@link sendUserOperation}
 * @returns userOperation along with entryPoint, transactionHash, blockHash, blockNumber if found or null
 *
 *
 * @example
 * import { createClient } from "viem"
 * import { getUserOperationByHash } from "permissionless/actions"
 *
 * const bundlerClient = createClient({
 *      chain: goerli,
 *      transport: http(BUNDLER_URL)
 * })
 *
 * getUserOperationByHash(bundlerClient, {hash: userOpHash})
 *
 */
export declare const getUserOperationByHash: (client: BundlerClient, { hash }: GetUserOperationByHashParameters) => Promise<{
    userOperation: UserOperation;
    entryPoint: Address;
    transactionHash: Hash;
    blockHash: Hash;
    blockNumber: bigint;
} | null>;
/**
 * Returns the user operation receipt from userOpHash
 *
 * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/getUserOperationReceipt
 *
 * @param client {@link BundlerClient} that you created using viem's createClient and extended it with bundlerActions.
 * @param args {@link GetUserOperationReceiptParameters} UserOpHash that was returned by {@link sendUserOperation}
 * @returns user operation receipt {@link GetUserOperationReceiptReturnType} if found or null
 *
 *
 * @example
 * import { createClient } from "viem"
 * import { getUserOperationReceipt } from "permissionless/actions"
 *
 * const bundlerClient = createClient({
 *      chain: goerli,
 *      transport: http(BUNDLER_URL)
 * })
 *
 * getUserOperationReceipt(bundlerClient, {hash: userOpHash})
 *
 */
export declare const getUserOperationReceipt: (client: BundlerClient, { hash }: GetUserOperationReceiptParameters) => Promise<{
    userOpHash: Hash;
    sender: Address;
    nonce: bigint;
    actualGasUsed: bigint;
    actualGasCost: bigint;
    success: boolean;
    receipt: {
        transactionHash: Hex;
        transactionIndex: bigint;
        blockHash: Hash;
        blockNumber: bigint;
        from: Address;
        to: Address | null;
        cumulativeGasUsed: bigint;
        status: TStatus;
        gasUsed: bigint;
        contractAddress: Address | null;
        logsBloom: Hex;
        effectiveGasPrice: bigint;
    };
    logs: {
        data: Hex;
        blockNumber: bigint;
        blockHash: Hash;
        transactionHash: Hash;
        logIndex: bigint;
        transactionIndex: bigint;
        address: Address;
        topics: Hex[];
    }[];
} | null>;
export type BundlerActions = {
    /**
     *
     * Sends user operation to the bundler
     *
     * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/sendUserOperation
     *
     * @param args {@link SendUserOperationParameters}.
     * @returns UserOpHash that you can use to track user operation as {@link Hash}.
     *
     * @example
     * import { createClient } from "viem"
     * import { bundlerActions } from "permissionless"
     *
     * const bundlerClient = createClient({
     *      chain: goerli,
     *      transport: http("https://api.pimlico.io/v1/goerli/rpc?apikey=YOUR_API_KEY_HERE")
     * }).extend(bundlerActions)
     *
     * const userOpHash = await bundlerClient.sendUserOperation({
     *      userOperation: signedUserOperation,
     *      entryPoint: entryPoint
     * })
     *
     * // Return '0xe9fad2cd67f9ca1d0b7a6513b2a42066784c8df938518da2b51bb8cc9a89ea34'
     */
    sendUserOperation: (args: SendUserOperationParameters) => Promise<Hash>;
    /**
     *
     * Estimates preVerificationGas, verificationGasLimit and callGasLimit for user operation
     *
     * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/estimateUserOperationGas
     *
     * @param args {@link EstimateUserOperationGasParameters}
     * @returns preVerificationGas, verificationGasLimit and callGasLimit as {@link EstimateUserOperationGasReturnType}
     *
     * @example
     * import { createClient } from "viem"
     * import { bundlerActions } from "permissionless"
     *
     * const bundlerClient = createClient({
     *      chain: goerli,
     *      transport: http(BUNDLER_URL)
     * }).extend(bundlerActions)
     *
     * const gasParameters = await bundlerClient.estimateUserOperationGas({
     *     userOperation: signedUserOperation,
     *    entryPoint: entryPoint
     * })
     *
     * // Return {preVerificationGas: 43492n, verificationGasLimit: 59436n, callGasLimit: 9000n}
     */
    estimateUserOperationGas: (args: EstimateUserOperationGasParameters) => Promise<EstimateUserOperationGasReturnType>;
    /**
     *
     * Returns the supported entrypoints by the bundler service
     *
     * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/supportedEntryPoints
     *
     * @returns Supported entryPoints
     *
     * @example
     * import { createClient } from "viem"
     * import { bundlerActions } from "permissionless"
     *
     * const bundlerClient = createClient({
     *      chain: goerli,
     *      transport: http(BUNDLER_URL)
     * }).extend(bundlerActions)
     *
     * const supportedEntryPoints = await bundlerClient.supportedEntryPoints()
     *
     * // Return ['0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789']
     */
    supportedEntryPoints: () => Promise<Address[]>;
    /**
     *
     * Returns the supported chain id by the bundler service
     *
     * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/chainId
     *
     * @returns Supported chain id
     *
     * @example
     * import { createClient } from "viem"
     * import { bundlerActions } from "permissionless"
     *
     * const bundlerClient = createClient({
     *      chain: goerli,
     *      transport: http(BUNDLER_URL)
     * }).extend(bundlerActions)
     *
     * const chainId = await bundlerClient.chainId()
     * // Return 5n for Goerli
     */
    chainId: () => Promise<number>;
    /**
     *
     * Returns the user operation from userOpHash
     *
     * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/getUserOperationByHash
     *
     * @param args {@link GetUserOperationByHash} UserOpHash that was returned by {@link sendUserOperation}
     * @returns userOperation along with entryPoint, transactionHash, blockHash, blockNumber if found or null
     *
     * @example
     * import { createClient } from "viem"
     * import { bundlerActions } from "permissionless"
     *
     * const bundlerClient = createClient({
     *      chain: goerli,
     *      transport: http(BUNDLER_URL)
     * }).extend(bundlerActions)
     *
     * await bundlerClient.getUserOperationByHash(userOpHash)
     *
     */
    getUserOperationByHash: (args: GetUserOperationByHashParameters) => Promise<GetUserOperationByHashReturnType>;
    /**
     *
     * Returns the user operation receipt from userOpHash
     *
     * - Docs: https://docs.pimlico.io/permissionless/reference/bundler-actions/getUserOperationReceipt
     *
     * @param args {@link GetUserOperationReceiptParameters} UserOpHash that was returned by {@link sendUserOperation}
     * @returns user operation receipt {@link GetUserOperationReceiptReturnType} if found or null
     *
     * @example
     * import { createClient } from "viem"
     * import { bundlerActions } from "permissionless"
     *
     * const bundlerClient = createClient({
     *      chain: goerli,
     *      transport: http(BUNDLER_URL)
     * }).extend(bundlerActions)
     *
     * await bundlerClient.getUserOperationReceipt({hash: userOpHash})
     *
     */
    getUserOperationReceipt: (args: GetUserOperationReceiptParameters) => Promise<GetUserOperationReceiptReturnType>;
};
declare const bundlerActions: (client: Client) => BundlerActions;
export { bundlerActions };
//# sourceMappingURL=bundler.d.ts.map