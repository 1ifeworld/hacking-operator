"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pimlicoPaymasterActions = exports.sponsorUserOperation = exports.pimlicoBundlerActions = exports.getUserOperationStatus = exports.getUserOperationGasPrice = void 0;
const utils_1 = require("./utils");
const getUserOperationGasPrice = async (client) => {
    const gasPrices = await client.request({
        method: "pimlico_getUserOperationGasPrice",
        params: []
    });
    return {
        slow: {
            maxFeePerGas: BigInt(gasPrices.slow.maxFeePerGas),
            maxPriorityFeePerGas: BigInt(gasPrices.slow.maxPriorityFeePerGas)
        },
        standard: {
            maxFeePerGas: BigInt(gasPrices.standard.maxFeePerGas),
            maxPriorityFeePerGas: BigInt(gasPrices.standard.maxPriorityFeePerGas)
        },
        fast: {
            maxFeePerGas: BigInt(gasPrices.fast.maxFeePerGas),
            maxPriorityFeePerGas: BigInt(gasPrices.fast.maxPriorityFeePerGas)
        }
    };
};
exports.getUserOperationGasPrice = getUserOperationGasPrice;
const getUserOperationStatus = async (client, { hash }) => {
    return client.request({
        method: "pimlico_getUserOperationStatus",
        params: [hash]
    });
};
exports.getUserOperationStatus = getUserOperationStatus;
const pimlicoBundlerActions = (client) => ({
    getUserOperationGasPrice: async () => (0, exports.getUserOperationGasPrice)(client),
    getUserOperationStatus: async (args) => (0, exports.getUserOperationStatus)(client, args)
});
exports.pimlicoBundlerActions = pimlicoBundlerActions;
const sponsorUserOperation = async (client, args) => {
    const response = await client.request({
        method: "pm_sponsorUserOperation",
        params: [(0, utils_1.deepHexlify)(args.userOperation), args.entryPoint]
    });
    return {
        paymasterAndData: response.paymasterAndData,
        preVerificationGas: BigInt(response.preVerificationGas),
        verificationGasLimit: BigInt(response.verificationGasLimit),
        callGasLimit: BigInt(response.callGasLimit)
    };
};
exports.sponsorUserOperation = sponsorUserOperation;
const pimlicoPaymasterActions = (client) => ({
    sponsorUserOperation: async (args) => (0, exports.sponsorUserOperation)(client, args)
});
exports.pimlicoPaymasterActions = pimlicoPaymasterActions;
//# sourceMappingURL=pimlico.js.map